// Code generated by protoc-gen-go. DO NOT EDIT.
// source: node_management.proto

package clustermgmt

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetStateRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStateRequest) Reset()         { *m = GetStateRequest{} }
func (m *GetStateRequest) String() string { return proto.CompactTextString(m) }
func (*GetStateRequest) ProtoMessage()    {}
func (*GetStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0c818a4411033a3, []int{0}
}

func (m *GetStateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetStateRequest.Unmarshal(m, b)
}
func (m *GetStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetStateRequest.Marshal(b, m, deterministic)
}
func (m *GetStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStateRequest.Merge(m, src)
}
func (m *GetStateRequest) XXX_Size() int {
	return xxx_messageInfo_GetStateRequest.Size(m)
}
func (m *GetStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetStateRequest proto.InternalMessageInfo

type GetStateResponse struct {
	NodeId               string   `protobuf:"bytes,1,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	RaftState            string   `protobuf:"bytes,2,opt,name=RaftState,proto3" json:"RaftState,omitempty"`
	RaftNodeCount        int32    `protobuf:"varint,3,opt,name=RaftNodeCount,proto3" json:"RaftNodeCount,omitempty"`
	SerfNodeCount        int32    `protobuf:"varint,4,opt,name=SerfNodeCount,proto3" json:"SerfNodeCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStateResponse) Reset()         { *m = GetStateResponse{} }
func (m *GetStateResponse) String() string { return proto.CompactTextString(m) }
func (*GetStateResponse) ProtoMessage()    {}
func (*GetStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0c818a4411033a3, []int{1}
}

func (m *GetStateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetStateResponse.Unmarshal(m, b)
}
func (m *GetStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetStateResponse.Marshal(b, m, deterministic)
}
func (m *GetStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStateResponse.Merge(m, src)
}
func (m *GetStateResponse) XXX_Size() int {
	return xxx_messageInfo_GetStateResponse.Size(m)
}
func (m *GetStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetStateResponse proto.InternalMessageInfo

func (m *GetStateResponse) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *GetStateResponse) GetRaftState() string {
	if m != nil {
		return m.RaftState
	}
	return ""
}

func (m *GetStateResponse) GetRaftNodeCount() int32 {
	if m != nil {
		return m.RaftNodeCount
	}
	return 0
}

func (m *GetStateResponse) GetSerfNodeCount() int32 {
	if m != nil {
		return m.SerfNodeCount
	}
	return 0
}

type ListSerfNodesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListSerfNodesRequest) Reset()         { *m = ListSerfNodesRequest{} }
func (m *ListSerfNodesRequest) String() string { return proto.CompactTextString(m) }
func (*ListSerfNodesRequest) ProtoMessage()    {}
func (*ListSerfNodesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0c818a4411033a3, []int{2}
}

func (m *ListSerfNodesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSerfNodesRequest.Unmarshal(m, b)
}
func (m *ListSerfNodesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSerfNodesRequest.Marshal(b, m, deterministic)
}
func (m *ListSerfNodesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSerfNodesRequest.Merge(m, src)
}
func (m *ListSerfNodesRequest) XXX_Size() int {
	return xxx_messageInfo_ListSerfNodesRequest.Size(m)
}
func (m *ListSerfNodesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSerfNodesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListSerfNodesRequest proto.InternalMessageInfo

type SerfEndpoint struct {
	HostPort             string   `protobuf:"bytes,1,opt,name=HostPort,proto3" json:"HostPort,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SerfEndpoint) Reset()         { *m = SerfEndpoint{} }
func (m *SerfEndpoint) String() string { return proto.CompactTextString(m) }
func (*SerfEndpoint) ProtoMessage()    {}
func (*SerfEndpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0c818a4411033a3, []int{3}
}

func (m *SerfEndpoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SerfEndpoint.Unmarshal(m, b)
}
func (m *SerfEndpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SerfEndpoint.Marshal(b, m, deterministic)
}
func (m *SerfEndpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerfEndpoint.Merge(m, src)
}
func (m *SerfEndpoint) XXX_Size() int {
	return xxx_messageInfo_SerfEndpoint.Size(m)
}
func (m *SerfEndpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_SerfEndpoint.DiscardUnknown(m)
}

var xxx_messageInfo_SerfEndpoint proto.InternalMessageInfo

func (m *SerfEndpoint) GetHostPort() string {
	if m != nil {
		return m.HostPort
	}
	return ""
}

// SerfNodeInfo holds info on a single Serf node
type SerfNodeInfo struct {
	Id                   string          `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Endpoints            []*SerfEndpoint `protobuf:"bytes,2,rep,name=Endpoints,proto3" json:"Endpoints,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SerfNodeInfo) Reset()         { *m = SerfNodeInfo{} }
func (m *SerfNodeInfo) String() string { return proto.CompactTextString(m) }
func (*SerfNodeInfo) ProtoMessage()    {}
func (*SerfNodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0c818a4411033a3, []int{4}
}

func (m *SerfNodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SerfNodeInfo.Unmarshal(m, b)
}
func (m *SerfNodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SerfNodeInfo.Marshal(b, m, deterministic)
}
func (m *SerfNodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerfNodeInfo.Merge(m, src)
}
func (m *SerfNodeInfo) XXX_Size() int {
	return xxx_messageInfo_SerfNodeInfo.Size(m)
}
func (m *SerfNodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SerfNodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SerfNodeInfo proto.InternalMessageInfo

func (m *SerfNodeInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SerfNodeInfo) GetEndpoints() []*SerfEndpoint {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

// ListSerfNodesResponse is the response to a ListSerfNodes call. The number of
// Serf nodes will initially be quite small so we won't need a stream response
// here.
type ListSerfNodesResponse struct {
	NodeId               string          `protobuf:"bytes,1,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	Swarm                []*SerfNodeInfo `protobuf:"bytes,2,rep,name=Swarm,proto3" json:"Swarm,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListSerfNodesResponse) Reset()         { *m = ListSerfNodesResponse{} }
func (m *ListSerfNodesResponse) String() string { return proto.CompactTextString(m) }
func (*ListSerfNodesResponse) ProtoMessage()    {}
func (*ListSerfNodesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0c818a4411033a3, []int{5}
}

func (m *ListSerfNodesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSerfNodesResponse.Unmarshal(m, b)
}
func (m *ListSerfNodesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSerfNodesResponse.Marshal(b, m, deterministic)
}
func (m *ListSerfNodesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSerfNodesResponse.Merge(m, src)
}
func (m *ListSerfNodesResponse) XXX_Size() int {
	return xxx_messageInfo_ListSerfNodesResponse.Size(m)
}
func (m *ListSerfNodesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSerfNodesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSerfNodesResponse proto.InternalMessageInfo

func (m *ListSerfNodesResponse) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ListSerfNodesResponse) GetSwarm() []*SerfNodeInfo {
	if m != nil {
		return m.Swarm
	}
	return nil
}

func init() {
	proto.RegisterType((*GetStateRequest)(nil), "clustermgmt.GetStateRequest")
	proto.RegisterType((*GetStateResponse)(nil), "clustermgmt.GetStateResponse")
	proto.RegisterType((*ListSerfNodesRequest)(nil), "clustermgmt.ListSerfNodesRequest")
	proto.RegisterType((*SerfEndpoint)(nil), "clustermgmt.SerfEndpoint")
	proto.RegisterType((*SerfNodeInfo)(nil), "clustermgmt.SerfNodeInfo")
	proto.RegisterType((*ListSerfNodesResponse)(nil), "clustermgmt.ListSerfNodesResponse")
}

func init() { proto.RegisterFile("node_management.proto", fileDescriptor_c0c818a4411033a3) }

var fileDescriptor_c0c818a4411033a3 = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0x87, 0x49, 0x6a, 0x4b, 0x33, 0xb5, 0x55, 0x17, 0x5b, 0x62, 0xa8, 0x10, 0x17, 0x0f, 0xc1,
	0x43, 0x84, 0x7a, 0xf0, 0x01, 0x44, 0x6a, 0x41, 0x45, 0x36, 0xa0, 0x47, 0x8d, 0x66, 0x53, 0x0a,
	0x66, 0x37, 0x66, 0x27, 0xf8, 0x22, 0xbe, 0x88, 0x6f, 0x28, 0xf9, 0xdf, 0x14, 0xab, 0xc7, 0xf9,
	0xed, 0xc7, 0xcc, 0x97, 0x99, 0xc0, 0x58, 0xc8, 0x80, 0x3f, 0x47, 0xbe, 0xf0, 0x97, 0x3c, 0xe2,
	0x02, 0xdd, 0x38, 0x91, 0x28, 0xc9, 0xe0, 0xed, 0x3d, 0x55, 0xc8, 0x93, 0x68, 0x19, 0x21, 0x3d,
	0x80, 0xbd, 0x39, 0x47, 0x0f, 0x7d, 0xe4, 0x8c, 0x7f, 0xa4, 0x5c, 0x21, 0xfd, 0xd2, 0x60, 0xbf,
	0xc9, 0x54, 0x2c, 0x85, 0xe2, 0x64, 0x02, 0xbd, 0x7b, 0x19, 0xf0, 0x45, 0x60, 0x6a, 0xb6, 0xe6,
	0x18, 0xac, 0xac, 0xc8, 0x14, 0x0c, 0xe6, 0x87, 0x05, 0x6c, 0xea, 0xf9, 0x53, 0x13, 0x90, 0x53,
	0x18, 0x66, 0x45, 0xc6, 0x5e, 0xc9, 0x54, 0xa0, 0xd9, 0xb1, 0x35, 0xa7, 0xcb, 0xda, 0x61, 0x46,
	0x79, 0x3c, 0x09, 0x1b, 0x6a, 0xa7, 0xa0, 0x5a, 0x21, 0x9d, 0xc0, 0xe1, 0xed, 0x4a, 0x61, 0x15,
	0xaa, 0x4a, 0xf7, 0x0c, 0x76, 0xb3, 0xec, 0x5a, 0x04, 0xb1, 0x5c, 0x09, 0x24, 0x16, 0xf4, 0x6f,
	0xa4, 0xc2, 0x07, 0x99, 0x60, 0xe9, 0x5a, 0xd7, 0xf4, 0xa9, 0x60, 0x73, 0x77, 0x11, 0x4a, 0x32,
	0x02, 0xbd, 0xfe, 0x22, 0x7d, 0x11, 0x90, 0x4b, 0x30, 0xaa, 0x3e, 0xca, 0xd4, 0xed, 0x8e, 0x33,
	0x98, 0x1d, 0xb9, 0x6b, 0xeb, 0x72, 0xd7, 0x27, 0xb1, 0x86, 0xa5, 0x2f, 0x30, 0xde, 0x90, 0xfb,
	0x67, 0x6f, 0xe7, 0xd0, 0xf5, 0x3e, 0xfd, 0x24, 0xda, 0x3a, 0xa5, 0x72, 0x64, 0x05, 0x37, 0xfb,
	0xd6, 0x60, 0x94, 0x65, 0x77, 0xf5, 0x39, 0xc9, 0x1c, 0xfa, 0xd5, 0x9d, 0xc8, 0xb4, 0xd5, 0x60,
	0xe3, 0xa4, 0xd6, 0xf1, 0x96, 0xd7, 0x52, 0xf2, 0x11, 0x86, 0x2d, 0x7b, 0x72, 0xd2, 0xe2, 0x7f,
	0x5b, 0xbb, 0x45, 0xff, 0x42, 0x8a, 0xbe, 0xaf, 0xbd, 0xfc, 0x87, 0xbb, 0xf8, 0x09, 0x00, 0x00,
	0xff, 0xff, 0x29, 0x19, 0x93, 0x87, 0x89, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeManagementClient is the client API for NodeManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeManagementClient interface {
	// GetState returns the node's internal state. Actual content is WIP.
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error)
	// ListSerfNodes lists the known Serf nodes from this node's point of
	// view. Technically this is not something we need since the management
	// tools can join the Serf cluster themselves but it's always nice to not
	// disturbe the Force when inspecting state. This also works as a nice
	// map to the other leader nodes.
	ListSerfNodes(ctx context.Context, in *ListSerfNodesRequest, opts ...grpc.CallOption) (*ListSerfNodesResponse, error)
}

type nodeManagementClient struct {
	cc *grpc.ClientConn
}

func NewNodeManagementClient(cc *grpc.ClientConn) NodeManagementClient {
	return &nodeManagementClient{cc}
}

func (c *nodeManagementClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error) {
	out := new(GetStateResponse)
	err := c.cc.Invoke(ctx, "/clustermgmt.NodeManagement/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagementClient) ListSerfNodes(ctx context.Context, in *ListSerfNodesRequest, opts ...grpc.CallOption) (*ListSerfNodesResponse, error) {
	out := new(ListSerfNodesResponse)
	err := c.cc.Invoke(ctx, "/clustermgmt.NodeManagement/ListSerfNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeManagementServer is the server API for NodeManagement service.
type NodeManagementServer interface {
	// GetState returns the node's internal state. Actual content is WIP.
	GetState(context.Context, *GetStateRequest) (*GetStateResponse, error)
	// ListSerfNodes lists the known Serf nodes from this node's point of
	// view. Technically this is not something we need since the management
	// tools can join the Serf cluster themselves but it's always nice to not
	// disturbe the Force when inspecting state. This also works as a nice
	// map to the other leader nodes.
	ListSerfNodes(context.Context, *ListSerfNodesRequest) (*ListSerfNodesResponse, error)
}

func RegisterNodeManagementServer(s *grpc.Server, srv NodeManagementServer) {
	s.RegisterService(&_NodeManagement_serviceDesc, srv)
}

func _NodeManagement_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagementServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermgmt.NodeManagement/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagementServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagement_ListSerfNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSerfNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagementServer).ListSerfNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermgmt.NodeManagement/ListSerfNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagementServer).ListSerfNodes(ctx, req.(*ListSerfNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clustermgmt.NodeManagement",
	HandlerType: (*NodeManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _NodeManagement_GetState_Handler,
		},
		{
			MethodName: "ListSerfNodes",
			Handler:    _NodeManagement_ListSerfNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node_management.proto",
}
