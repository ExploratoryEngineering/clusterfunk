// Code generated by protoc-gen-go. DO NOT EDIT.
// source: leader_management.proto

package clustermgmt

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ListRaftNodesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRaftNodesRequest) Reset()         { *m = ListRaftNodesRequest{} }
func (m *ListRaftNodesRequest) String() string { return proto.CompactTextString(m) }
func (*ListRaftNodesRequest) ProtoMessage()    {}
func (*ListRaftNodesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7921f362ec0b3b87, []int{0}
}

func (m *ListRaftNodesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRaftNodesRequest.Unmarshal(m, b)
}
func (m *ListRaftNodesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRaftNodesRequest.Marshal(b, m, deterministic)
}
func (m *ListRaftNodesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRaftNodesRequest.Merge(m, src)
}
func (m *ListRaftNodesRequest) XXX_Size() int {
	return xxx_messageInfo_ListRaftNodesRequest.Size(m)
}
func (m *ListRaftNodesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRaftNodesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRaftNodesRequest proto.InternalMessageInfo

type RaftNodeInfo struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	RaftState            string   `protobuf:"bytes,2,opt,name=RaftState,proto3" json:"RaftState,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RaftNodeInfo) Reset()         { *m = RaftNodeInfo{} }
func (m *RaftNodeInfo) String() string { return proto.CompactTextString(m) }
func (*RaftNodeInfo) ProtoMessage()    {}
func (*RaftNodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7921f362ec0b3b87, []int{1}
}

func (m *RaftNodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RaftNodeInfo.Unmarshal(m, b)
}
func (m *RaftNodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RaftNodeInfo.Marshal(b, m, deterministic)
}
func (m *RaftNodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftNodeInfo.Merge(m, src)
}
func (m *RaftNodeInfo) XXX_Size() int {
	return xxx_messageInfo_RaftNodeInfo.Size(m)
}
func (m *RaftNodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftNodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RaftNodeInfo proto.InternalMessageInfo

func (m *RaftNodeInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RaftNodeInfo) GetRaftState() string {
	if m != nil {
		return m.RaftState
	}
	return ""
}

type ListRaftNodesResponse struct {
	NodeId               string          `protobuf:"bytes,1,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	Members              []*RaftNodeInfo `protobuf:"bytes,2,rep,name=Members,proto3" json:"Members,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListRaftNodesResponse) Reset()         { *m = ListRaftNodesResponse{} }
func (m *ListRaftNodesResponse) String() string { return proto.CompactTextString(m) }
func (*ListRaftNodesResponse) ProtoMessage()    {}
func (*ListRaftNodesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7921f362ec0b3b87, []int{2}
}

func (m *ListRaftNodesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRaftNodesResponse.Unmarshal(m, b)
}
func (m *ListRaftNodesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRaftNodesResponse.Marshal(b, m, deterministic)
}
func (m *ListRaftNodesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRaftNodesResponse.Merge(m, src)
}
func (m *ListRaftNodesResponse) XXX_Size() int {
	return xxx_messageInfo_ListRaftNodesResponse.Size(m)
}
func (m *ListRaftNodesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRaftNodesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRaftNodesResponse proto.InternalMessageInfo

func (m *ListRaftNodesResponse) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ListRaftNodesResponse) GetMembers() []*RaftNodeInfo {
	if m != nil {
		return m.Members
	}
	return nil
}

func init() {
	proto.RegisterType((*ListRaftNodesRequest)(nil), "clustermgmt.ListRaftNodesRequest")
	proto.RegisterType((*RaftNodeInfo)(nil), "clustermgmt.RaftNodeInfo")
	proto.RegisterType((*ListRaftNodesResponse)(nil), "clustermgmt.ListRaftNodesResponse")
}

func init() { proto.RegisterFile("leader_management.proto", fileDescriptor_7921f362ec0b3b87) }

var fileDescriptor_7921f362ec0b3b87 = []byte{
	// 215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcf, 0x49, 0x4d, 0x4c,
	0x49, 0x2d, 0x8a, 0xcf, 0x4d, 0xcc, 0x4b, 0x4c, 0x4f, 0xcd, 0x4d, 0xcd, 0x2b, 0xd1, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4e, 0xce, 0x29, 0x2d, 0x2e, 0x49, 0x2d, 0xca, 0x4d, 0xcf, 0x2d,
	0x51, 0x12, 0xe3, 0x12, 0xf1, 0xc9, 0x2c, 0x2e, 0x09, 0x4a, 0x4c, 0x2b, 0xf1, 0xcb, 0x4f, 0x49,
	0x2d, 0x0e, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x51, 0xb2, 0xe1, 0xe2, 0x81, 0x89, 0x79, 0xe6,
	0xa5, 0xe5, 0x0b, 0xf1, 0x71, 0x31, 0x79, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x31,
	0x79, 0xa6, 0x08, 0xc9, 0x70, 0x71, 0x82, 0xe4, 0x83, 0x4b, 0x12, 0x4b, 0x52, 0x25, 0x98, 0xc0,
	0xc2, 0x08, 0x01, 0xa5, 0x14, 0x2e, 0x51, 0x34, 0x53, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85,
	0xc4, 0xb8, 0xd8, 0xc0, 0x46, 0xc2, 0x8c, 0x82, 0xf2, 0x84, 0x8c, 0xb9, 0xd8, 0x7d, 0x53, 0x73,
	0x93, 0x52, 0x8b, 0x8a, 0x25, 0x98, 0x14, 0x98, 0x35, 0xb8, 0x8d, 0x24, 0xf5, 0x90, 0x5c, 0xa9,
	0x87, 0xec, 0x94, 0x20, 0x98, 0x4a, 0xa3, 0x2c, 0x2e, 0x01, 0x1f, 0xb0, 0x1f, 0x7d, 0xe1, 0x5e,
	0x14, 0x0a, 0xe3, 0xe2, 0x45, 0xb1, 0x59, 0x48, 0x11, 0xc5, 0x20, 0x6c, 0x7e, 0x95, 0x52, 0xc2,
	0xa7, 0x04, 0xe2, 0xf0, 0x24, 0x36, 0x70, 0xd8, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x65,
	0xc3, 0xfd, 0x0f, 0x56, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LeaderManagementClient is the client API for LeaderManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LeaderManagementClient interface {
	// ListNodes lists the nodes in the cluster. This will also include
	// information present in the Serf cluster.
	ListRaftNodes(ctx context.Context, in *ListRaftNodesRequest, opts ...grpc.CallOption) (*ListRaftNodesResponse, error)
}

type leaderManagementClient struct {
	cc *grpc.ClientConn
}

func NewLeaderManagementClient(cc *grpc.ClientConn) LeaderManagementClient {
	return &leaderManagementClient{cc}
}

func (c *leaderManagementClient) ListRaftNodes(ctx context.Context, in *ListRaftNodesRequest, opts ...grpc.CallOption) (*ListRaftNodesResponse, error) {
	out := new(ListRaftNodesResponse)
	err := c.cc.Invoke(ctx, "/clustermgmt.LeaderManagement/ListRaftNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaderManagementServer is the server API for LeaderManagement service.
type LeaderManagementServer interface {
	// ListNodes lists the nodes in the cluster. This will also include
	// information present in the Serf cluster.
	ListRaftNodes(context.Context, *ListRaftNodesRequest) (*ListRaftNodesResponse, error)
}

func RegisterLeaderManagementServer(s *grpc.Server, srv LeaderManagementServer) {
	s.RegisterService(&_LeaderManagement_serviceDesc, srv)
}

func _LeaderManagement_ListRaftNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRaftNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderManagementServer).ListRaftNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermgmt.LeaderManagement/ListRaftNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderManagementServer).ListRaftNodes(ctx, req.(*ListRaftNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LeaderManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clustermgmt.LeaderManagement",
	HandlerType: (*LeaderManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRaftNodes",
			Handler:    _LeaderManagement_ListRaftNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "leader_management.proto",
}
