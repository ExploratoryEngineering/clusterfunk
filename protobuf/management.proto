syntax = "proto3";

package clustermgmt;

message GetStateRequest {

};

message GetStateResponse {
    string NodeId = 1;
    string RaftState= 2;
    int32 RaftNodeCount = 3;
    int32 SerfNodeCount = 4;
};

message ListSerfNodesRequest {

};

message SerfEndpoint {
    string HostPort = 1;
    string Name = 2;
}

message ServiceAttribute {
    string Name = 1;
    string Value = 2;
}

// SerfNodeInfo holds info on a single Serf node
message SerfNodeInfo {
    string Id = 1;
    string Endpoint = 2;
    string Status = 3;
    repeated SerfEndpoint ServiceEndpoints = 4;
    repeated ServiceAttribute Attributes = 5;

}

//ListSerfNodesResponse is the response to a ListSerfNodes call. The number of
// Serf nodes will initially be quite small so we won't need a stream response
// here.
message ListSerfNodesResponse {
    string NodeId = 1;
    repeated SerfNodeInfo Swarm = 2;
};

message ListRaftNodesRequest {

};

message RaftNodeInfo {
    string Id = 1;
    string RaftState = 2;
    bool IsLeader = 3;
};

message ListRaftNodesResponse {
    string NodeId = 1;
    repeated RaftNodeInfo Members = 2;
};

/*
// Messages for the RetireNode method
message RetireNodeRequest {

};

message RetireNodeResponse {

};

// Messages for the AddNode method
message AddNodeRequest {

};

message AddNodeResponse {

};

// Messages for the PurgeNode method
message PurgeNodeRequest {

};

message PurgeNodeResponse {

};

// Messages for the ListShards method
message ListShardsRequest {

};

message ListShardsResponse {

};
*/

// LeaderManagement service is responsible for node management. Management
// operations must happen on the leader in the cluster.
service ClusterManagement {
    // GetState returns the node's internal state. Actual content is WIP.
    rpc GetState(GetStateRequest) returns (GetStateResponse);


    // ListSerfNodes lists the known Serf nodes from this node's point of
    // view. Technically this is not something we need since the management
    // tools can join the Serf cluster themselves but it's always nice to not
    // disturbe the Force when inspecting state. This also works as a nice
    // map to the other leader nodes.
    rpc ListSerfNodes(ListSerfNodesRequest) returns (ListSerfNodesResponse);

    // ListNodes lists the nodes in the cluster. This will also include
    // information present in the Serf cluster.
    rpc ListRaftNodes(ListRaftNodesRequest) returns (ListRaftNodesResponse);


    /*
    // RetireNode will mark a node as retired and it will be removed the next
    // time a shard distribution process is happening.
    rpc RetireNode(RetireNodeRequest) returns (RetireNodeResponse);

    // AddNode will add a node to the cluster. When the node joins a new shard
    // distribution process will start.
    rpc AddNode(AddNodeRequest) returns (AddNodeResponse);

    // PurgeNode will forcefully remove a node from the cluster. The node
    // might be online, in that case a new shard distribution process starts
    // or it might be offline and in that case there will be no changes.
    rpc PurgeNode(PurgeNodeRequest) returns (PurgeNodeResponse);

    // ListShards will list statistics for the shards on each node.
    rpc ListShards(ListShardsRequest) returns (ListShardsResponse);
    */
};

