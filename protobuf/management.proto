syntax = "proto3";

package clustermgmt;

message GetStateRequest {

};

message GetStateResponse {
    string NodeId = 1;
    enum ClusterState {
        OK = 0;
        VOTING = 1;
    };
    ClusterState State = 2;
    int32 NodeCount = 3;
    int32 VoterCount = 4;
};

message EndpointInfo {
    string Name = 1;
    string HostPort = 2;
}

// NodeInfo contains information on a single node in the cluster/swarm
message NodeInfo {
    // NodeId is the node's identifier.
    string NodeId = 1;

    enum NodeKind {
        LEADER = 0;
        VOTER = 1;
        NONVOTER = 2;
        NONMEMBER = 3;
    };
    NodeKind Kind = 2;

    // NodeState is the state of nodes. See godoc comments for a description
    enum NodeState {
        INITIALIZED = 0;
        READY = 1;
        SERVING = 2;
        REORGANIZING = 3;
        DRAINING = 4;
        TERMINATING = 5;
    };
    NodeState State = 3;
    repeated EndpointInfo Endpoints = 4;
}

//ListSerfNodesResponse is the response to a ListSerfNodes call. The number of
// Serf nodes will initially be quite small so we won't need a stream response
// here.
message ListNodesResponse {
    string NodeId = 1;
    repeated NodeInfo Nodes = 2;
};

message ListNodesRequest {

};

/*
// Messages for the RetireNode method
message RetireNodeRequest {

};

message RetireNodeResponse {

};

// Messages for the AddNode method
message AddNodeRequest {

};

message AddNodeResponse {

};

// Messages for the PurgeNode method
message PurgeNodeRequest {

};

message PurgeNodeResponse {

};

// Messages for the ListShards method
message ListShardsRequest {

};

message ListShardsResponse {

};
*/

// LeaderManagement service is responsible for node management. Management
// operations must happen on the leader in the cluster.
service ClusterManagement {
    // GetState returns the node's internal state. Actual content is WIP.
    rpc GetState(GetStateRequest) returns (GetStateResponse);


    // ListNodes lists the known nodes in the cluster, both voters, non-voters and
    // bystanders (ie those that are member of the Serf swarm but not the Raft cluster)
    rpc ListNodes(ListNodesRequest) returns (ListNodesResponse);


    /*
    // RetireNode will mark a node as retired and it will be removed the next
    // time a shard distribution process is happening.
    rpc RetireNode(RetireNodeRequest) returns (RetireNodeResponse);

    // AddNode will add a node to the cluster. When the node joins a new shard
    // distribution process will start.
    rpc AddNode(AddNodeRequest) returns (AddNodeResponse);

    // PurgeNode will forcefully remove a node from the cluster. The node
    // might be online, in that case a new shard distribution process starts
    // or it might be offline and in that case there will be no changes.
    rpc PurgeNode(PurgeNodeRequest) returns (PurgeNodeResponse);

    // ListShards will list statistics for the shards on each node.
    rpc ListShards(ListShardsRequest) returns (ListShardsResponse);
    */
};

