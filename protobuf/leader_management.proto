syntax = "proto3";

package clustermgmt;

// Messages for the ListRaftNode method
message ListRaftNodeRequest {

};

message ListRaftNodeResponse {

};

// Messages for the ListSerfNode method
message ListSerfNodeRequest {

};

message ListSerfNodeResponse {

};
/*
// Messages for the RetireNode method
message RetireNodeRequest {

};

message RetireNodeResponse {

};

// Messages for the AddNode method
message AddNodeRequest {

};

message AddNodeResponse {

};

// Messages for the PurgeNode method
message PurgeNodeRequest {

};

message PurgeNodeResponse {

};

// Messages for the ListShards method
message ListShardsRequest {

};

message ListShardsResponse {

};
*/

// LeaderManagement service is responsible for node management. Management
// operations must happen on the leader in the cluster.
service LeaderManagement {
    // ListNodes lists the nodes in the cluster. This will also include
    // information present in the Serf cluster.
    rpc ListRaftNodes(ListRaftNodeRequest) returns (ListRaftNodeResponse);

    // ListSerfNodes lists the Serf nodes in the cluster. This includes the
    // status and tags on each node.
    rpc ListSerfNodes(ListSerfNodeRequest) returns (ListSerfNodeResponse);

    /*
    // RetireNode will mark a node as retired and it will be removed the next
    // time a shard distribution process is happening.
    rpc RetireNode(RetireNodeRequest) returns (RetireNodeResponse);

    // AddNode will add a node to the cluster. When the node joins a new shard
    // distribution process will start.
    rpc AddNode(AddNodeRequest) returns (AddNodeResponse);

    // PurgeNode will forcefully remove a node from the cluster. The node
    // might be online, in that case a new shard distribution process starts
    // or it might be offline and in that case there will be no changes.
    rpc PurgeNode(PurgeNodeRequest) returns (PurgeNodeResponse);

    // ListShards will list statistics for the shards on each node.
    rpc ListShards(ListShardsRequest) returns (ListShardsResponse);
    */
};

